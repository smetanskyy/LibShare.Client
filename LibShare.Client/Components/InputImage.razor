@inject IFileReaderService FileReaderService

<div class="container" style="width: 100%; height: 100%;">
    <div class="row">
        <input type="file" @ref="InputElement" @onchange="ImageFileSelected" accept=".jpg,.jpeg,.png" />
    </div>
    <div class="row">
        @if (ImageBase64 != null)
        {
            <div class="col-12">
                <img src="data:image/jpeg;base64, @ImageBase64" />
            </div>
        }
        @if (ImageUrl != null)
        {
            <div class="col-md-12 d-flex justify-content-center align-items-center pl-2">
                <img class="rounded" style="object-fit: cover;" src="@ImageUrl" alt="Alternate Text" />
            </div>
        }
    </div>
</div>

@code {
    public ElementReference InputElement { get; private set; }
    public string ImageBase64 { get; private set; }

    [Parameter]
    public string ImageUrl { get; set; }

    [Parameter]
    public EventCallback<string> OnSelectedImage { get; set; }

    async Task ImageFileSelected()
    {
        foreach (var file in await FileReaderService.CreateReference(InputElement).EnumerateFilesAsync())
        {
            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(10 * 1024))
            {
                var imageBytes = new byte[memoryStream.Length];
                memoryStream.Read(imageBytes, 0, (int)memoryStream.Length);
                ImageBase64 = Convert.ToBase64String(imageBytes);
                await OnSelectedImage.InvokeAsync(ImageBase64);
                ImageUrl = null;
                StateHasChanged();
            }
        }

    }
}
