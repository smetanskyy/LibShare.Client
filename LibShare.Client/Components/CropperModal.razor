@if (displayModalToggle)
{
    <!-- Modal -->
    <div class="modal-backdrop show"></div>
    <div class="modal fade show" id="cropperModal" tabindex="-1" role="dialog"
         aria-labelledby="cropperModal" aria-hidden="true" style="display: block">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropperModalTitle">@Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Hide">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @if (ChildContent == null)
                    {
                        <text>AWESOME RESULT!</text>
                        <InputImage Label="Фото користувача" OnSelectedImage="PhotoSelected" ImageUrl="@PhotoUrl" />
                    }
                    else
                    {
                        @ChildContent
                    }
                    <input type="text" @bind="Base64String.Photo" />
                    <p>@Base64String.Photo</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Hide">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="OnConfirm">Save changes</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [CascadingParameter]
    public ImageApiModel Base64String { get; set; }

    private bool displayModalToggle = false;

    [Parameter]
    public string Title { get; set; } = "Custom Modal";

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback OnConfirm { get; set; }

    public void Show()
    {
        displayModalToggle = true;
        StateHasChanged();
    }

    public void Hide()
    {
        displayModalToggle = false;
        StateHasChanged();
    }

    [Parameter]
    public UserApiModel UserModel { get; set; } = new UserApiModel();

    public Spinner LoadSpinner { get; set; }
    public string PhotoUrl { get; set; }

    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(UserModel.Photo))
        {
            PhotoUrl = UserModel.Photo;
            UserModel.Photo = null;
        }
    }

    private void PhotoSelected(string imageBase64)
    {
        UserModel.Photo = imageBase64;
        PhotoUrl = null;
        Console.WriteLine("Hello from PhotoSelected");
    }
}